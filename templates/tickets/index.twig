{% extends "layouts/base.twig" %}

{% block content %}
<div class="tickets-container">
    {% include "components/header.twig" %}

    <main class="tickets-main">
        <div class="container">
            <div class="tickets-header">
                <h1>Ticket Management</h1>
                <button class="btn-primary" onclick="openCreateModal()">Create New Ticket</button>
            </div>

            <div class="tickets-grid">
                {% for ticket in tickets %}
                    <div class="ticket-card" data-ticket-id="{{ ticket.id }}">
                        <div class="ticket-header">
                            <h3>{{ ticket.title }}</h3>
                            <span class="status-badge status-{{ ticket.status }}">
                                {{ ticket.status|replace({'_': ' '})|title }}
                            </span>
                        </div>
                        <p class="ticket-description">{{ ticket.description ?: 'No description provided' }}</p>
                        <div class="ticket-meta">
                            <span class="priority priority-{{ ticket.priority }}">{{ ticket.priority|title }}</span>
                            <span>Created: {{ ticket.createdAt|date('M j, Y g:i A') }}</span>
                        </div>
                        <div class="ticket-actions">
                            <button class="btn-secondary" onclick="editTicket('{{ ticket.id }}')">Edit</button>
                            <button class="btn-danger" onclick="deleteTicket('{{ ticket.id }}')">Delete</button>
                        </div>
                    </div>
                {% else %}
                    <div class="empty-state">
                        <h3>No tickets found</h3>
                        <p>Create your first ticket to get started</p>
                    </div>
                {% endfor %}
            </div>
        </div>
    </main>
</div>

<!-- Create/Edit Ticket Modal -->
<div id="ticketModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">Create New Ticket</h2>
            <span class="close" onclick="closeTicketModal()">&times;</span>
        </div>
        <form id="ticketForm" method="POST" action="/tickets/create">
            <input type="hidden" id="ticketId" name="id">
            
            <div class="form-group">
                <label for="title">Title *</label>
                <input type="text" id="title" name="title" required maxlength="255">
                <span class="error-message" id="titleError"></span>
            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" name="description" rows="4" placeholder="Enter ticket description..."></textarea>
            </div>

            <div class="form-group">
                <label for="status">Status *</label>
                <select id="status" name="status" required>
                    <option value="">Select Status</option>
                    <option value="open">Open</option>
                    <option value="in_progress">In Progress</option>
                    <option value="closed">Closed</option>
                </select>
                <span class="error-message" id="statusError"></span>
            </div>

            <div class="form-group">
                <label for="priority">Priority</label>
                <select id="priority" name="priority">
                    <option value="low">Low</option>
                    <option value="medium" selected>Medium</option>
                    <option value="high">High</option>
                    <option value="urgent">Urgent</option>
                </select>
            </div>

            <div class="form-actions">
                <button type="button" class="btn-secondary" onclick="closeTicketModal()">Cancel</button>
                <button type="submit" class="btn-primary">Save Ticket</button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Confirm Delete</h2>
            <span class="close" onclick="closeDeleteModal()">&times;</span>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete this ticket? This action cannot be undone.</p>
        </div>
        <div class="form-actions">
            <button type="button" class="btn-secondary" onclick="closeDeleteModal()">Cancel</button>
            <form id="deleteForm" method="POST" style="display: inline;">
                <input type="hidden" name="id" id="deleteTicketId">
                <button type="submit" class="btn-danger">Delete Ticket</button>
            </form>
        </div>
    </div>
</div>

<style>
.tickets-container {
    min-height: 100vh;
    background: #f8fafc;
    width: 100%;
}

.tickets-main {
    padding: 2rem 0;
    width: 100%;
}

.tickets-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.tickets-header h1 {
    color: #1f2937;
    margin: 0;
}

.tickets-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
    width: 100%;
}

.ticket-card {
    background: white;
    padding: 1.5rem;
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    border-left: 4px solid #e5e7eb;
    transition: transform 0.2s, box-shadow 0.2s;
}

.ticket-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.ticket-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
}

.ticket-header h3 {
    margin: 0;
    color: #1f2937;
    flex: 1;
    margin-right: 1rem;
    font-size: 1.125rem;
    line-height: 1.4;
}

.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    white-space: nowrap;
}

.status-open { 
    background: #d1fae5; 
    color: #065f46; 
    border-left-color: #10b981;
}
.status-in_progress { 
    background: #fef3c7; 
    color: #92400e; 
    border-left-color: #f59e0b;
}
.status-closed { 
    background: #f3f4f6; 
    color: #374151; 
    border-left-color: #6b7280;
}

.ticket-description {
    color: #6b7280;
    margin-bottom: 1rem;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.ticket-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.priority {
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    font-size: 0.75rem;
}

.priority-low { background: #d1fae5; color: #065f46; }
.priority-medium { background: #fef3c7; color: #92400e; }
.priority-high { background: #fecaca; color: #991b1b; }
.priority-urgent { background: #fecaca; color: #991b1b; font-weight: bold; }

.ticket-actions {
    display: flex;
    gap: 0.5rem;
}

.empty-state {
    text-align: center;
    padding: 3rem;
    color: #6b7280;
    grid-column: 1 / -1;
    background: white;
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
}

.empty-state h3 {
    margin-bottom: 0.5rem;
    color: #374151;
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    overflow-y: auto;
}

.modal-content {
    background-color: white;
    margin: 2% auto;
    padding: 0;
    border-radius: 0.75rem;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 20px 25px -5px rgba(0,0,0,0.1);
    max-height: 90vh;
    overflow-y: auto;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #e5e7eb;
    position: sticky;
    top: 0;
    background: white;
    border-radius: 0.75rem 0.75rem 0 0;
}

.modal-header h2 {
    margin: 0;
    color: #1f2937;
}

.close {
    font-size: 1.5rem;
    cursor: pointer;
    color: #6b7280;
    background: none;
    border: none;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.close:hover {
    color: #374151;
    background: #f3f4f6;
    border-radius: 50%;
}

#ticketForm {
    padding: 1.5rem;
}

.modal-body {
    padding: 1.5rem;
}

.modal-body p {
    margin: 0;
    color: #6b7280;
    line-height: 1.5;
}

.form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid #e5e7eb;
}

@media (max-width: 768px) {
    .tickets-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
    }
    
    .tickets-grid {
        grid-template-columns: 1fr;
    }
    
    .modal-content {
        margin: 5% auto;
        width: 95%;
    }
    
    .form-actions {
        flex-direction: column;
    }
    
    .ticket-header {
        flex-direction: column;
        gap: 0.5rem;
        align-items: flex-start;
    }
    
    .ticket-meta {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
    }
}
</style>

<script>
let currentEditingTicket = null;

function openCreateModal() {
    currentEditingTicket = null;
    document.getElementById('modalTitle').textContent = 'Create New Ticket';
    document.getElementById('ticketForm').reset();
    document.getElementById('ticketForm').action = '/tickets/create';
    document.getElementById('priority').value = 'medium';
    document.getElementById('status').value = '';
    document.getElementById('ticketId').value = '';
    clearFormErrors('ticketForm');
    document.getElementById('ticketModal').style.display = 'block';
}

function editTicket(ticketId) {
    // Find the ticket data from the current page
    const ticketElement = document.querySelector(`[data-ticket-id="${ticketId}"]`);
    if (!ticketElement) {
        showToast('Ticket not found', 'error');
        return;
    }

    // Extract ticket data from the DOM
    const title = ticketElement.querySelector('h3').textContent;
    const description = ticketElement.querySelector('.ticket-description').textContent;
    const status = ticketElement.querySelector('.status-badge').className.match(/status-(\w+)/)[1];
    const priority = ticketElement.querySelector('.priority').className.match(/priority-(\w+)/)[1];
    
    currentEditingTicket = { id: ticketId, title, description, status, priority };
    document.getElementById('modalTitle').textContent = 'Edit Ticket';
    document.getElementById('ticketForm').action = '/tickets/update';
    document.getElementById('ticketId').value = ticketId;
    document.getElementById('title').value = title;
    document.getElementById('description').value = description === 'No description provided' ? '' : description;
    document.getElementById('status').value = status;
    document.getElementById('priority').value = priority;
    clearFormErrors('ticketForm');
    document.getElementById('ticketModal').style.display = 'block';
}

function deleteTicket(ticketId) {
    document.getElementById('deleteTicketId').value = ticketId;
    document.getElementById('deleteForm').action = '/tickets/delete';
    document.getElementById('deleteModal').style.display = 'block';
}

function closeTicketModal() {
    document.getElementById('ticketModal').style.display = 'none';
    clearFormErrors('ticketForm');
}

function closeDeleteModal() {
    document.getElementById('deleteModal').style.display = 'none';
}

// Close modal when clicking outside
window.onclick = function(event) {
    const ticketModal = document.getElementById('ticketModal');
    const deleteModal = document.getElementById('deleteModal');
    
    if (event.target === ticketModal) {
        closeTicketModal();
    }
    if (event.target === deleteModal) {
        closeDeleteModal();
    }
}

// Close modal with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeTicketModal();
        closeDeleteModal();
    }
});

function clearFormErrors(formId) {
    const form = document.getElementById(formId);
    if (form) {
        const errors = form.querySelectorAll('.error-message');
        errors.forEach(error => error.textContent = '');
        
        const errorFields = form.querySelectorAll('.error');
        errorFields.forEach(field => field.classList.remove('error'));
    }
}

// Form validation
document.getElementById('ticketForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const title = document.getElementById('title').value.trim();
    const status = document.getElementById('status').value;
    let isValid = true;
    
    clearFormErrors('ticketForm');
    
    if (!title) {
        document.getElementById('titleError').textContent = 'Title is required';
        document.getElementById('title').classList.add('error');
        isValid = false;
    }
    
    if (!status) {
        document.getElementById('statusError').textContent = 'Status is required';
        document.getElementById('status').classList.add('error');
        isValid = false;
    }
    
    if (isValid) {
        this.submit();
    }
});

// Handle delete form submission
document.getElementById('deleteForm').addEventListener('submit', function(e) {
    e.preventDefault();
    this.submit();
});

// Show any toast messages from server only once (remove the duplicate client-side showToast calls)
document.addEventListener('DOMContentLoaded', function() {
    // Remove any existing server-side toasts to prevent duplicates
    const toastContainer = document.getElementById('toast-container');
    if (toastContainer) {
        toastContainer.innerHTML = '';
    }
    
    // Show server messages as toasts
    {% if success %}
        showToast('{{ success|e('js') }}', 'success');
    {% endif %}
    {% if error %}
        showToast('{{ error|e('js') }}', 'error');
    {% endif %}
});
</script>
{% endblock %}